type: edu
files:
- name: src/index.html
  visible: true
  text: |
    <!doctype html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Document</title>
    </head>
    <body>

    </body>
    </html>
  learner_created: false
- name: test/test.js
  visible: false
  text: |+
    const fs = require("fs");
    const path = require('path');
    const rimraf = require("rimraf");
    const workingDir = path.resolve(__dirname, '../src');
    const pagePath = 'file://' + path.resolve(__dirname, workingDir + '/index.html');

    const {StageTest, correct, wrong} = require('hs-test-web');

    class ConverterTest extends StageTest {

        page = this.getPage(pagePath)

        tests = [
            this.page.execute(() => {
                const nodes = document.getElementsByClassName("title");

                if (nodes.length !== 1) {
                    return wrong("There should be one element with class 'title', found " + nodes.length + "!")
                }

                const titleDiv = nodes[0];

                if (titleDiv.textContent !== 'Case Converter') {
                    return wrong("The title name should be 'Case Converter', but found " + titleDiv.textContent.trim())
                }

                return correct()
            }),
            this.page.execute(() => {
                const nodes = document.getElementsByTagName("textarea");

                if (nodes.length !== 1) {
                    return wrong("There should be one 'textarea' element, found " + nodes.length + "!")
                }

                this.textArea = nodes[0];

                if (this.textArea.textContent.trim() !== '') {
                    return wrong("TextArea should be empty by default!")
                }

                return correct()
            }),
            this.page.execute(() => {
                this.upperCaseButton = document.querySelector("button#upper-case")
                this.lowerCaseButton = document.querySelector("button#lower-case")
                this.properCaseButton = document.querySelector("button#proper-case")
                this.sentenceCaseButton = document.querySelector("button#sentence-case")
                this.saveTextFileButton = document.querySelector("button#save-text-file")

                if (this.upperCaseButton === null) {
                    return wrong("Can't find a button with '#upper-case' id!")
                }

                if (this.lowerCaseButton === null) {
                    return wrong("Can't find a button with '#lower-case' id!")
                }

                if (this.properCaseButton === null) {
                    return wrong("Can't find a button with '#proper-case' id!")
                }

                if (this.sentenceCaseButton === null) {
                    return wrong("Can't find a button with '#sentence-case' id!")
                }

                if (this.saveTextFileButton === null) {
                    return wrong("Can't find a button with '#save-text-file' id!")
                }

                return correct()
            }),
            this.page.execute(() => {

                this.textArea.value = 'Lorem Ipsum is simply dummy text of the printing and typesetting industry.' +
                    ' Lorem Ipsum has been the industry\'s standard dummy text ever since the 1500s,' +
                    ' when an unknown printer took a galley of type and scrambled it to make a type specimen book.'

                const upperCaseText = 'LOREM IPSUM IS SIMPLY DUMMY TEXT OF THE PRINTING AND TYPESETTING INDUSTRY.' +
                    ' LOREM IPSUM HAS BEEN THE INDUSTRY\'S STANDARD DUMMY TEXT EVER SINCE THE 1500S,' +
                    ' WHEN AN UNKNOWN PRINTER TOOK A GALLEY OF TYPE AND SCRAMBLED IT TO MAKE A TYPE SPECIMEN BOOK.'

                this.upperCaseButton.click()

                if (this.textArea.value !== upperCaseText) {
                    return wrong("After clicking on 'Upper Case' button your text is wrong!")
                }

                const lowerCaseText = 'lorem ipsum is simply dummy text of the printing and typesetting industry.' +
                    ' lorem ipsum has been the industry\'s standard dummy text ever since the 1500s,' +
                    ' when an unknown printer took a galley of type and scrambled it to make a type specimen book.'

                this.lowerCaseButton.click()

                if (this.textArea.value !== lowerCaseText) {
                    return wrong("After clicking on 'Lower Case' button your text is wrong!")
                }

                const properCase = 'Lorem Ipsum Is Simply Dummy Text Of The Printing And Typesetting Industry.' +
                    ' Lorem Ipsum Has Been The Industry\'s Standard Dummy Text Ever Since The 1500s,' +
                    ' When An Unknown Printer Took A Galley Of Type And Scrambled It To Make A Type Specimen Book.'

                this.properCaseButton.click()

                if (this.textArea.value !== properCase) {
                    return wrong("After clicking on 'Proper Case' button your text is wrong!")
                }

                const sentenceCase = 'Lorem ipsum is simply dummy text of the printing and typesetting industry.' +
                    ' Lorem ipsum has been the industry\'s standard dummy text ever since the 1500s,' +
                    ' when an unknown printer took a galley of type and scrambled it to make a type specimen book.'

                this.sentenceCaseButton.click()

                if (this.textArea.value !== sentenceCase) {
                    return wrong("After clicking on 'Sentence Case' button your text is wrong!")
                }

                return correct()
            }),
            this.node.execute(async () => {
                await this.page.pageInstance._client.send('Page.setDownloadBehavior', {
                    behavior: 'allow',
                    downloadPath: workingDir + path.sep + "downloads"
                });
                return correct()
            }),
            this.page.execute(async () => {
                this.saveTextFileButton.click()

                const delay = ms => new Promise(res => setTimeout(res, ms));
                await delay(2000);

                return correct()
            }),
            this.node.execute(() => {
                const correctTextFileContent = 'Lorem ipsum is simply dummy text of the printing and typesetting industry.' +
                    ' Lorem ipsum has been the industry\'s standard dummy text ever since the 1500s,' +
                    ' when an unknown printer took a galley of type and scrambled it to make a type specimen book.'

                const filePath = workingDir + `${path.sep}downloads${path.sep}text.txt`;

                if (!fs.existsSync(filePath)) {
                    return wrong("Looks like you didn't download a text file named 'text.txt', after clicking on 'Save Text File' button")
                }

                let fileContent = fs.readFileSync(filePath, "utf8");

                if (fileContent !== correctTextFileContent) {
                    return wrong("Content of downloaded file is wrong!")
                }

                rimraf.sync(workingDir + '/downloads');

                return correct()
            })
        ]
    }

    it('Test stage', async function () {
        try {
            this.timeout(30000)
        } catch (ignored) {
        }
        await new ConverterTest().runTests()
    }, 30000)

  learner_created: false
- name: src/index.js
  visible: true
  text: |
    let upperCase = document.getElementById("upper-case");
    let lowerCase = document.getElementById("lower-case");
    let properCase = document.getElementById("proper-case");
    let sentenceCase = document.getElementById("sentence-case");
    let textArea = document.querySelector("textarea");

    upperCase.addEventListener("click", toUpper);
    lowerCase.addEventListener("click", toLower);
    properCase.addEventListener("click", toProper);
    sentenceCase.addEventListener("click", toSentence);

    function toUpper() {
        textArea.value = textArea.value.toUpperCase();
    }
    function toLower() {
        textArea.value = textArea.value.toLowerCase();
    }
    function toProper() {
        let array = textArea.value.split(" ");
        array = array.map(word => word.charAt(0).toUpperCase() + word.substring(1));
        textArea.value = array.join(" ");
    }
    function toSentence() {
        let sentences = textArea.value.split(".");
        sentences = sentences.map(sentence => sentence.trim())
            .map(sentence => sentence.charAt(0).toUpperCase() + sentence.substring(1).toLowerCase());
        textArea.value = sentences.join(". ").trim();
    }
  learner_created: true
- name: src/index.css
  visible: true
  text: |
    :root {
        --background-color: #ffe5e5;
        --color: #000000;
        --feedback-bg-color: #ffffff;
        --feedback-secondary-color: #ffacac;
        --feedback-primary-color: #53488d;
        --feedback-icon-color: #ffffff;
        --feedback-form-input: #f4f4f4;
    }

    body {
        font-family: Arial, sans-serif;
    }

    .title {
        font-size: 200%;
        padding-bottom: 1%;
    }

    textarea {
        width: 97%;
        height: 350px;
    }

    .buttons {
        display: flex;
        flex-wrap: wrap;
        padding-top: 1%;
        gap: 1%;
    }

    button {
        padding: 10px 20px;
        font-size: 100%;
        cursor: pointer;

        border-radius: 7px 7px 7px 0;

        background-color: var(--feedback-secondary-color);
        color: var(--feedback-primary-color);

        transition: all 0.3s;
    }

    button:hover {
        border-radius: 0;

        color: var(--feedback-primary-color);
        background-color: var(--background-color);
        background-image: url("data:image/svg+xml,%3Csvg width='52' height='26' viewBox='0 0 52 26' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23ffacac' fill-opacity='0.4'%3E%3Cpath d='M10 10c0-2.21-1.79-4-4-4-3.314 0-6-2.686-6-6h2c0 2.21 1.79 4 4 4 3.314 0 6 2.686 6 6 0 2.21 1.79 4 4 4 3.314 0 6 2.686 6 6 0 2.21 1.79 4 4 4v2c-3.314 0-6-2.686-6-6 0-2.21-1.79-4-4-4-3.314 0-6-2.686-6-6zm25.464-1.95l8.486 8.486-1.414 1.414-8.486-8.486 1.414-1.414z' /%3E%3C/g%3E%3C/g%3E%3C/svg%3E");
        animation: animatedBackground 5s linear infinite alternate;
    }

    @keyframes animatedBackground {
        from {
            background-position: 0 0;
        }
        to {
            background-position: 100% 0;
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/14001#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Sun, 15 May 2022 09:44:18 UTC
record: -1
